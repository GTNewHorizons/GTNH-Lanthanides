package com.elisis.gtnhlanth.common.tileentity.recipe.beamline;

import java.util.HashSet;

import gregtech.api.gui.modularui.GT_UITextures;
import net.minecraft.item.ItemStack;
import net.minecraft.util.StatCollector;

public class BeamlineRecipeAdder {

    public static final BeamlineRecipeAdder instance = new BeamlineRecipeAdder();

    public final LanthRecipeMap SourceChamberRecipes = new LanthRecipeMap(
            new HashSet<>(200),
            "gtnhlanth.recipe.sc",
            StatCollector.translateToLocal("tile.recipe.sc"),
            null,
            "",
            1,
            1,
            0,
            0,
            1,
            null,
            1,
            null,
            false,
            false);
    
    public final LanthRecipeMap TargetChamberRecipes = (LanthRecipeMap) new LanthRecipeMap(
    		new HashSet<>(500),
    		"gtnhlanth.recipe.tc",
    		StatCollector.translateToLocal("tile.recipe.sc"),
    		null,
    		"",
    		2,
    		1,
    		0,
    		0,
    		1,
    		null,
    		1,
    		null,
    		false,
    		false).setProgressBar(GT_UITextures.PROGRESSBAR_ARROW_MULTIPLE);

    /***
     *
     * @param itemInputs  - duh
     * @param itemOutputs - duh
     * @param particleId  - The ID of the {@link com.elisis.gtnhlanth.common.beamline.Particle} generated by the recipe.
     *                    It is recommended to use Particle#ordinal()
     * @param rate        - The rate/amount of particles generated
     * @param maxEnergy   - The maximum energy particles generated by this recipe can possess (keV). Set this value >=
     *                    max particle energy to limit it to the latter
     * @param focus       - Focus of the particle generated
     * @param energyRatio - Set high for little-to-no EUt energy scaling, low for the opposite
     * @param minEUt      - Minimum EUt required for the recipe. ! May not output if input energy is equal to minimum !
     */
    public boolean addSourceChamberRecipe(ItemStack[] itemInputs, ItemStack[] itemOutputs, int particleId, int rate,
            float maxEnergy, float focus, float energyRatio, int minEUt) {

        return (SourceChamberRecipes.addRecipe(
                new RecipeSC(
                        false,
                        itemInputs,
                        itemOutputs,
                        null,
                        new int[] {},
                        null,
                        null,
                        20,
                        minEUt,
                        particleId,
                        rate,
                        maxEnergy,
                        focus,
                        energyRatio))
                != null);
    }
    
    /***
    *
    * @param itemInput  - The item to be used as a target
    * @param itemOutput - duh
    * @param particleId  - The ID of the {@link com.elisis.gtnhlanth.common.beamline.Particle} used by the recipe.
    *                    It is recommended to use Particle#ordinal()
    * @param amount        - The total amount of particles required for the recipe to come to completion. The duration of the recipe will be determined by this and the input particle rate.
    * @param minEnergy   - The minimum energy amount required by this recipe
    * @param maxEnergy	 - The maximum energy amount allowed by this recipe    
    * @param minFocus       - Minimum focus allowed by the recipe
    * @param energyRatio - Set high for little-to-no EUt energy scaling, low for the opposite
    * @param minEUt      - Minimum EUt required for the recipe to start
    */
    
    public boolean addTargetChamberRecipe(ItemStack itemInput, ItemStack itemOutput, ItemStack itemFocus, int particleId, int amount, 
    		float minEnergy, float maxEnergy, float minFocus, float energyRatio, int minEUt) {
    	
    	return (TargetChamberRecipes.addRecipe(
    			new RecipeTC(
    					false, 
    					itemInput, 
    					itemOutput, 
    					itemFocus, 
    					particleId, 
    					amount, 
    					minEnergy, 
    					maxEnergy, 
    					minFocus, 
    					energyRatio, 
    					minEUt)
    			) != null);
    	
    }
    
    
}
