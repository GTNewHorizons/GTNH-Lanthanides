package com.elisis.gtnhlanth.common.tileentity.recipe.beamline;

import java.util.HashSet;
import net.minecraft.item.ItemStack;
import net.minecraft.util.StatCollector;

public class BeamlineRecipeAdder {

    public static final BeamlineRecipeAdder instance = new BeamlineRecipeAdder();

    public final SCRecipeMap SourceChamberRecipes = new SCRecipeMap(
            new HashSet<>(200),
            "gtnhlanth.recipe.sc",
            StatCollector.translateToLocal("tile.recipe.sc"),
            null,
            "",
            1,
            1,
            0,
            0,
            1,
            null,
            1,
            null,
            false,
            false);

    /***
     *
     * @param itemInputs - duh
     * @param itemOutputs - duh
     * @param particleId - The ID of the {@link com.elisis.gtnhlanth.common.beamline.Particle} generated by the recipe
     * @param rate - The rate/amount of particles generated
     * @param maxEnergy - The maximum energy particles outputted by this recipe can have (keV). Set this >= max particle energy for guaranteed value, independent of energy
     * @param focus - Focus of the particle generated
     * @param energyRatio - Set high for little-to-no EUt energy scaling, low for the opposite
     * @param minEUt - Minimum EUt required for the recipe. !May not output if input energy is equal to minimum!
     */
    public boolean addSourceChamberRecipe(
            ItemStack[] itemInputs,
            ItemStack[] itemOutputs,
            int particleId,
            int rate,
            float maxEnergy,
            float focus,
            float energyRatio,
            int minEUt) {

        return (SourceChamberRecipes.addRecipe(new RecipeSC(
                        false,
                        itemInputs,
                        itemOutputs,
                        null,
                        new int[] {},
                        null,
                        null,
                        20,
                        minEUt,
                        particleId,
                        rate,
                        maxEnergy,
                        focus,
                        energyRatio))
                != null);
    }
}
